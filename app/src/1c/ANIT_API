////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ API


// contractors.get
//
//Отправляет тестовый ответ со всеми параметрами пришедшего
// запроса
//
// Параметры
//  Запрос  - Пришедший HTTP запрос
//
// Возвращаемое значение:
//  СтруктураВозврата - Структура
//
Функция ContractorsGet(Запрос,Ошибка,ОписаниеОшибки) Экспорт

	offset     = Запрос.ПараметрыЗапроса.Получить("offset");
	count      = Запрос.ПараметрыЗапроса.Получить("count");
	filter_name = Запрос.ПараметрыЗапроса.Получить("filter_name");


	ОписаниеОшибки = "";

	Если offset  = Неопределено Тогда
		Ошибка = Истина;
		ОписаниеОшибки = ОписаниеОшибки + ", Не указано offset";
	КонецЕсли;

	Если count  = Неопределено Тогда
		Ошибка = Истина;
		ОписаниеОшибки = ОписаниеОшибки + ", Не указано count";
	КонецЕсли;


	Если Ошибка Тогда
		Возврат Неопределено;
	КонецЕсли;

	Количество = Число(count);
	Смещение   = Число(offset);

	Запрос = Новый Запрос;


	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка,
	               |	Контрагенты.Наименование КАК Наименование,
	               |	Контрагенты.Код
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.Наименование ПОДОБНО &СтрокаПоиска
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";


	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + filter_name + "%");
	ТабДанных = Запрос.Выполнить().Выгрузить();


	Массив = Новый Массив;

	Если ТабДанных.Количество() > Количество + Смещение -1 Тогда
		СтаршийИндекс = Количество + Смещение - 1;
	Иначе
		СтаршийИндекс = ТабДанных.Количество() - 1;
	КонецЕсли;

	Для Сч = Смещение По СтаршийИндекс Цикл

		СтруктураКонтр = Новый Структура;
		СтруктураКонтр.Вставить("Наименование",ТабДанных[Сч].Наименование);
		СтруктураКонтр.Вставить("Код",ТабДанных[Сч].Код);

		Массив.Добавить(СтруктураКонтр);

	КонецЦикла;
	Структура = Новый Структура;
	Структура.Вставить("ВсегоЭлементов",ТабДанных.Количество());
	Структура.Вставить("Контрагенты",Массив);



	Возврат Структура;
КонецФункции



// test.get
//
//Отправляет тестовый ответ со всеми параметрами пришедшего
// запроса
//
// Параметры
//  Запрос  - ПришеTestURLдший HTTP запрос
//
// Возвращаемое значение:
//  СтруктураВозврата - Структура
//
Функция TestGet(Запрос,Ошибка,ОписаниеОшибки) Экспорт



	СтруктураВход = Новый Структура;

	СтруктураВход.Вставить("HTTPМетод",Запрос.HTTPМетод);
	СтруктураВход.Вставить("БазовыйURL",Запрос.БазовыйURL);
	СтруктураВход.Вставить("ОтносительныйURL",Запрос.БазовыйURL);
	СтруктураВход.Вставить("Заголовки",Запрос.Заголовки);
	СтруктураВход.Вставить("ПараметрыURL",Запрос.ПараметрыURL);
    СтруктураВход.Вставить("ПараметрыЗапроса",Запрос.ПараметрыЗапроса);
    СтруктураВход.Вставить("Тело",Запрос.ПолучитьТелоКакСтроку() );

	Ошибка = Истина;
	ОписаниеОшибки = "Тест ошибки";

	Возврат СтруктураВход;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ

//Взвращает строку JSON из объекта
Функция ВернутьСтрокуJSONИ(Структура) Экспорт
	Попытка
		ЗаписьJSON	= Новый ЗаписьJSON;
		ЗаписьJSON.ПроверятьСтруктуру = Ложь;
		ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
		ЗаписатьJSON(ЗаписьJSON,Структура);

		Возврат ЗаписьJSON.Закрыть();
	Исключение
		СтруктураОшибка = Новый Структура;
		СтруктураОшибка.Вставить("Пришел",ТекущаяДата());
		СтруктураОшибка.Вставить("Подготовлен",ТекущаяДата());
	    СтруктураОшибка.Вставить("Ошибка",Истина);
        СтруктураОшибка.Вставить("ОписаниеОшибки","Ошибка сериализации в JSON строку: " + ОписаниеОшибки());
        СтруктураОшибка.Вставить("Ответ",Неопределено);

		Возврат ВернутьСтрокуJSONИ(СтруктураОшибка);

	КонецПопытки;
КонецФункции

